/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/admin/slider.js":
/*!**************************************!*\
  !*** ./resources/js/admin/slider.js ***!
  \**************************************/
/***/ (() => {

eval("$(document).ready(function () {\n  handleAddBtn();\n  handleEditBtn();\n  handleDeleteBtn();\n  handleCheckBtn();\n  handleMultiActionsBtn();\n  appendNewLineTitle();\n});\nfunction appendNewLineTitle() {\n  var html = \"<div class=\\\"input-group mt-2\\\">\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"title[]\\\" id=\\\"title\\\" required placeholder=\\\"Enter slider title\\\">\\n                            <div class=\\\"input-group-append\\\" id=\\\"removeNewLineTitle\\\">\\n                                <span class=\\\"input-group-text\\\">-</span>\\n                            </div>\\n                </div>\";\n  $(\".appendNewLineTitle\").on(\"click\", function () {\n    $(\".appendTitleInput\").append(html);\n  });\n}\n$(document).on(\"click\", \"#removeNewLineTitle\", function () {\n  console.log('remove');\n  $(this).closest('.input-group').remove();\n});\nfunction handleAddBtn() {\n  $('.addBtn').on('click', function () {\n    $('#for_update').html('');\n    $('.slider-title').text('Add New Slider');\n    $('#title').val('');\n    $('#description').val('');\n  });\n}\nfunction handleEditBtn() {\n  $('.editBtn').on('click', function () {\n    tr = $(this).closest('tr');\n    var id = tr.attr('id');\n    $('#for_update').html(\"<input type=\\\"hidden\\\" name=\\\"slider_id\\\" value=\\\"\".concat(id, \"\\\">\"));\n    $('.slider-title').text('Update Slider');\n    $('#title').val(tr.find('td:eq(2)').text().trim());\n    $('#description').val(tr.find('td:eq(3)').text().trim());\n  });\n}\nfunction handleDeleteBtn() {\n  $('.deleteBtn').on('click', function () {\n    tr = $(this).closest('tr');\n    var id = tr.attr('id');\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        axios[\"delete\"](\"/user/slider/\".concat(id, \"/delete/\")).then(function (response) {\n          tr.remove();\n          Swal.fire('Deleted!', 'Your file has been deleted.', 'success');\n        });\n      } else {\n        Swal.fire('Cancelled', 'Your imaginary file is safe :)', 'error');\n      }\n    });\n  });\n}\nfunction handleCheckBtn() {\n  $(\"#checkbox-all\").on(\"change\", function () {\n    $(this).toggleClass(\"checked\");\n    if ($(this).hasClass(\"checked\")) {\n      $(\".sliderTableBody tr td .check\").each(function () {\n        $(this).find(\"input\").addClass('checked');\n      });\n    } else {\n      $(\".sliderTableBody tr td\").find(\".check\").each(function () {\n        $(this).find(\"input\").removeClass('checked');\n      });\n    }\n    isCheckedActionBtn();\n  });\n  $(\".checkbox\").on('change', function () {\n    $(this).toggleClass(\"checked\");\n    $(\".sliderTableBody tr td .check\").each(function () {\n      var isChecked = $(this).find(\"input\").hasClass('checked');\n      if (!isChecked) {\n        $(\"#checkbox-all\").removeClass(\"checked\");\n        return false;\n      } else {\n        $(\"#checkbox-all\").addClass(\"checked\");\n      }\n    });\n    isCheckedActionBtn();\n  });\n}\nfunction isCheckedActionBtn() {\n  var isChecked = $(\".checkbox\").hasClass(\"checked\");\n  if (!isChecked) {\n    $(\".actionBtn\").addClass(\"d-none\");\n  } else {\n    $(\".actionBtn\").removeClass(\"d-none\");\n  }\n}\nfunction handleMultiActionsBtn() {\n  $(\".activeBtn\").on(\"click\", function () {\n    var sliderIds = [];\n    $(\".sliderTableBody tr td .check\").each(function () {\n      var isChecked = $(this).find(\"input\").hasClass('checked');\n      if (isChecked) {\n        var trId = $(this).closest('tr').attr('id');\n        sliderIds.push(trId);\n      }\n    });\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You want to active those slides!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#1aa111',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, active it!'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        sendActions(sliderIds, 'active');\n      } else {\n        Swal.fire('Cancelled', 'Your imaginary file is safe :)', 'error');\n      }\n    });\n  });\n  $(\".inActiveBtn\").on(\"click\", function () {\n    var sliderIds = [];\n    $(\".sliderTableBody tr td .check\").each(function () {\n      var isChecked = $(this).find(\"input\").hasClass('checked');\n      if (isChecked) {\n        var trId = $(this).closest('tr').attr('id');\n        sliderIds.push(trId);\n      }\n    });\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You want to inactive those slides!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#0938e0',\n      cancelButtonColor: '#c90835',\n      confirmButtonText: 'Yes, active it!'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        sendActions(sliderIds, 'inactive');\n      } else {\n        Swal.fire('Cancelled', 'Your imaginary file is safe :)', 'error');\n      }\n    });\n  });\n  $(\".multiDeleteBtn\").on(\"click\", function () {\n    var sliderIds = [];\n    $(\".sliderTableBody tr td .check\").each(function () {\n      var isChecked = $(this).find(\"input\").hasClass('checked');\n      if (isChecked) {\n        var trId = $(this).closest('tr').attr('id');\n        sliderIds.push(trId);\n      }\n    });\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        sendActions(sliderIds, 'delete');\n      } else {\n        Swal.fire('Cancelled', 'Your imaginary file is safe :)', 'error');\n      }\n    });\n  });\n}\nfunction sendActions(ids, actionName) {\n  axios.post('/user/slider/multiple-actions', {\n    ids: ids,\n    action: actionName\n  }).then(function (response) {\n    console.log(response.data.data);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/admin/slider.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/admin/slider.js"]();
/******/ 	
/******/ })()
;